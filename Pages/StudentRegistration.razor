@page "/students/register"
@using AutoMapper;
@using UniversityShared.Models;
@using UniversityWeb.Repositories;
@inject IJSRuntime JsRuntime

<h3>Student Registration</h3>

<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@student" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>

            <div class="form-group" style="margin-top: 20px;">
                <label class="control-label" for="firstName">First Name:</label>
                <InputText @bind-Value="student.FirstName" id="firstName" class="form-control" placeholder="Doe"/>
                <ValidationMessage For="() => student.FirstName" class="text-danger"/>
            </div>

            <div class="form-group" style="margin-top: 20px;">
                <label class="control-label" for="lastName">Last Name:</label>
                <InputText @bind-Value="student.LastName" id="lastName" class="form-control" placeholder="John" />
                <ValidationMessage For="() => student.LastName" class="text-danger"/>
            </div>

            <div class="form-group" style="margin-top: 20px;">
                <label class="control-label" for="date">Enrollment Date</label>
                <InputDate @bind-Value="student.EnrollmentDate" id="date" class="form-control"/>
            </div> 

            <div class="form-group" style="margin-top: 20px;">
                <input type="submit" value="Register" class="btn btn-primary" />
            </div>

            <div class="form-group" style="margin-top: 20px;">
                @if(registering)
                {
                    <span>Saving Details....</span>
                }
            </div>

        </EditForm>
    </div>
</div>

@code {
    private Student student = new Student();

    private bool registering = false;

    [Inject]
    public required IMapper mapper { get; set; }

    [Inject]
    public required StudentsRepository StudentsRepo { get; set; }


    public async void HandleValidSubmit()
    {
        if(registering)
        {
            return;
        }

        registering = true;

        var registrationData = mapper.Map<StudentRegistrationData>(student);

        try
        {
            await StudentsRepo.RegisterStudent(registrationData);
            await JsRuntime.InvokeVoidAsync("alert", "Saved");
            student = new Student();
        } catch(Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "an error occurred");

        }

        registering = false;
        StateHasChanged();
    }
}
